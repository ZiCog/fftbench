DEVICE P8X32A,XTAL1,PLL16X
FREQ 96_000_000

'----------------------------------------------------------------------------------------------------------------------
'
' fft_bench.spin
'
' A simple FFT implmentation for use as a micro-controller benchmark. This is an in-place
' Radix-2 Decimation In Time FFT using fixed point arithmetic.
'
' When reimplementing this benchmark in other languages please honour the intention of
' this benchmark by following the algorithm as closely as possible. This version is based off
' of bech_fft.spin which is to be regarded as the "mother" of all versions of this benchmark
' in other languages.
'
' This FFT was developed from the description by Douglas L. Jones at
' http://cnx.org/content/m12016/latest/.
' It is written as a direct implementation of the discussion and diagrams on that page
' with an emphasis on clarity and ease of understanding rather than speed.
'
' Michael Rychlik. 2011-02-27
'
' This file is released under the terms of the MIT license. See below.
'
' Credits:
'
'     A big thank you to Dave Hein for clearing up some issues during a great FFT debate on
'     the Parallax Inc Propller discussion forum:
'     http://forums.parallax.com/showthread.php?127306-Fourier-for-dummies-under-construction
'
' History:
'
' 2011-02-27    v1.0  Initial version.
'
'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
' Specify size of FFT buffer here with length and log base 2 of the length.
' N.B. Changing this will require changing the "twiddle factor" tables.
'     and may also require changing the fixed point format (if going bigger)

FFT_SIZE      CON 1024
LOG2_FFT_SIZE CON 10


f           VAR LONG
real        VAR LONG
imag        VAR LONG
magnitude   VAR LONG
startTime   VAR LONG
endTime     VAR LONG
k           VAR LONG
i           VAR LONG
revi        VAR LONG
tx1         VAR LONG
ty1         VAR LONG


k1          VAR LONG
k2          VAR LONG
k3          VAR LONG
a           VAR LONG
b           VAR LONG
c           VAR LONG
d           VAR LONG
flightSize  VAR LONG
noFlights   VAR LONG
b0          VAR LONG
b1          VAR LONG
wIndex      VAR LONG
level       VAR LONG
flight      VAR LONG
butterfly   VAR LONG
flightIndex VAR LONG
tx          VAR LONG
ty          VAR LONG

temp        VAR LONG
temp2       VAR LONG
temp3       VAR LONG
ascii       HUB STRING(10)


' cos and sin parts of the signal to be analysed
' Result is written back to here.
' Just write input sammles to bx and zero all by.

bx  HUB LONG(FFT_SIZE)
by  HUB LONG(FFT_SIZE)


time_us       FUNC 0
fft_bench     SUB  0
sqrti         FUNC 1
printSpectrum SUB  0
fillInput     SUB  0
bitReverse    FUNC 2
decimate      SUB  0
butterflies   SUB  0

printChar     SUB  1
printStr      SUB  1
printNumber   SUB  1

'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------

Program Start LMM

Start:
  ' Setup serial output pin
  HIGH 30
  ' Wait for user to start PST
  PAUSE 4000

  fft_bench
END


'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
' Return a timestamp in microsecond resolution.
FUNC time_us
  __param1 = cnt / 80
  RETURN __param1
ENDFUNC

'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
SUB fft_bench

  printStr "fft_bench v1.0"
  printChar 13

  ' Input some data
  fillInput

  ' Start benchmark timer
  startTime = time_us

  ' Radix-2 Decimation In Time, the bit-reversal step.
  decimate

  ' The actual Fourier transform work.
  butterflies

  ' Stop benchmark timer
  endTime = time_us

  ' Print resulting spectrum
  printSpectrum

  printStr "1024 point bit-reversal and butterfly run time = "
  __param1 = endTime - startTime
  printNumber __param1
  PrintStr " us"
  PrintChar 13
ENDSUB

'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
FUNC sqrti
  __param2 = 0
  __param3 = 1 << 30
  DO WHILE __param3 <> 0
    __param2 = __param2 | __param3
    IF __param2 <= __param1 THEN
      DEC __param1, __param2
      INC __param2, __param3
    ELSE
      DEC __param2, __param3
    ENDIF
    __param2 = __param2 >> 1
    __param3 = __param3 >> 2
  LOOP
  __param1 = __param2
  RETURN __param1
ENDFUNC

'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
SUB printSpectrum

  ' Spectrum is available in first half of the buffers after FFT.
  printStr "Freq.    Magnitude"
  printChar 13

  temp = FFT_SIZE / 2
  FOR f = 0 TO temp
    ' Frequency magnitde is square root of cos part sqaured plus sin part squared
    RDLONG bx(f), real
    real = real / FFT_SIZE
    RDLONG by(f), imag
    imag = imag / FFT_SIZE
    real = real * real
    imag = imag * imag
    magnitude = real + imag
    magnitude = sqrti magnitude
    IF magnitude > 0 THEN
      printNumber f
      printNumber magnitude
      printChar 13
    ENDIF
  NEXT
ENDSUB
'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
' For testing define 16 samples  of an input wave form here.
input_ LDATA 4096, 3784, 2896, 1567, 0, -1567, -2896, -3784, -4096, -3784, -2896, -1567, 0, 1567, 2896, 3784
'----------------------------------------------------------------------------------------------------------------------

'----------------------------------------------------------------------------------------------------------------------
' Fill buffer bx with samples of of an imput signal and clear by.
SUB fillInput

  temp = FFT_SIZE - 1
  FOR k = 0 TO temp
    ' Two frequencies of the waveform defined in input
    temp2 = k * 3
    temp2 = temp2 // 16
    RDLONG input_(temp2), temp2
    temp2 = temp2 / 4
    temp3 = k * 5
    temp3 = temp3 // 16
    RDLONG input_(temp3), temp3
    temp3 = temp3 / 4
    temp2 = temp2 + temp3
    temp3 = k AND 1
    IF temp3 <> 0 THEN
      INC temp2, 512 ' 4096 / 8
    ELSE
      DEC temp2, 512 ' 4096 / 8
    ENDIF
    INC temp2, 512 ' A DC level (4096 / 8)
    WRLONG bx(k), temp2
    WRLONG by(k), 0 ' Clear Y array
  NEXT
ENDSUB

'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
SUB decimate

  ' Radix-2 decimation in time.
  ' Moves every sample of bx and by to a postion given by
  ' reversing the bits of its original array index.
  temp = FFT_SIZE - 1
  FOR i = 0 TO temp
'    revi = bitReverse i, LOG2_FFT_SIZE
    temp = 32 - LOG2_FFT_SIZE
    revi = i
\   rev revi,temp
    IF i < revi THEN
      RDLONG bx(i), tx1
      RDLONG by(i), ty1

      RDLONG bx(revi), temp
      RDLONG by(revi), temp2

      WRLONG bx(i), temp
      WRLONG by(i), temp2

      WRLONG bx(revi), tx1
      WRLONG bx(revi), ty1

    ENDIF
  NEXT
ENDSUB

'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
wx WDATA
  WDATA 4095,  4094,  4094,  4094,  4093,  4093,  4092,  4091,  4090,  4088,  4087,  4085,  4083,  4081,  4079,  4077,
  WDATA 4075,  4072,  4070,  4067,  4064,  4061,  4057,  4054,  4050,  4046,  4042,  4038,  4034,  4030,  4025,  4021,
  WDATA 4016,  4011,  4006,  4000,  3995,  3989,  3984,  3978,  3972,  3966,  3959,  3953,  3946,  3939,  3932,  3925,
  WDATA 3918,  3911,  3903,  3896,  3888,  3880,  3872,  3864,  3855,  3847,  3838,  3829,  3820,  3811,  3802,  3792,
  WDATA 3783,  3773,  3763,  3753,  3743,  3733,  3723,  3712,  3701,  3691,  3680,  3668,  3657,  3646,  3634,  3623,
  WDATA 3611,  3599,  3587,  3575,  3563,  3550,  3537,  3525,  3512,  3499,  3486,  3473,  3459,  3446,  3432,  3418,
  WDATA 3404,  3390,  3376,  3362,  3348,  3333,  3318,  3304,  3289,  3274,  3258,  3243,  3228,  3212,  3197,  3181,
  WDATA 3165,  3149,  3133,  3117,  3100,  3084,  3067,  3051,  3034,  3017,  3000,  2983,  2965,  2948,  2930,  2913,
  WDATA 2895,  2877,  2859,  2841,  2823,  2805,  2787,  2768,  2750,  2731,  2712,  2693,  2674,  2655,  2636,  2617,
  WDATA 2597,  2578,  2558,  2539,  2519,  2499,  2479,  2459,  2439,  2419,  2398,  2378,  2357,  2337,  2316,  2295,
  WDATA 2275,  2254,  2233,  2211,  2190,  2169,  2148,  2126,  2105,  2083,  2061,  2040,  2018,  1996,  1974,  1952,
  WDATA 1930,  1908,  1885,  1863,  1841,  1818,  1796,  1773,  1750,  1728,  1705,  1682,  1659,  1636,  1613,  1590,
  WDATA 1567,  1543,  1520,  1497,  1473,  1450,  1426,  1403,  1379,  1355,  1332,  1308,  1284,  1260,  1236,  1212,
  WDATA 1188,  1164,  1140,  1116,  1092,  1067,  1043,  1019,   994,   970,   946,   921,   897,   872,   848,   823,
  WDATA  798,   774,   749,   724,   700,   675,   650,   625,   600,   575,   551,   526,   501,   476,   451,   426,
  WDATA  401,   376,   351,   326,   301,   276,   251,   226,   200,   175,   150,   125,   100,    75,    50,    25,

' N.B. These two tables must be contiguous in memory

wy WDATA
  WDATA  0,   -25,   -50,   -75,  -100,  -125,  -150,  -175,  -200,  -226,  -251,  -276,  -301,  -326,  -351,  -376,
  WDATA  -401,  -426,  -451,  -476,  -501,  -526,  -551,  -576,  -600,  -625,  -650,  -675,  -700,  -724,  -749,  -774,
  WDATA  -798,  -823,  -848,  -872,  -897,  -921,  -946,  -970,  -995, -1019, -1043, -1067, -1092, -1116, -1140, -1164,
  WDATA -1188, -1212, -1236, -1260, -1284, -1308, -1332, -1355, -1379, -1403, -1426, -1450, -1473, -1497, -1520, -1543,
  WDATA -1567, -1590, -1613, -1636, -1659, -1682, -1705, -1728, -1750, -1773, -1796, -1818, -1841, -1863, -1885, -1908,
  WDATA -1930, -1952, -1974, -1996, -2018, -2040, -2062, -2083, -2105, -2126, -2148, -2169, -2190, -2212, -2233, -2254,
  WDATA -2275, -2295, -2316, -2337, -2357, -2378, -2398, -2419, -2439, -2459, -2479, -2499, -2519, -2539, -2558, -2578,
  WDATA -2597, -2617, -2636, -2655, -2674, -2693, -2712, -2731, -2750, -2768, -2787, -2805, -2823, -2841, -2859, -2877,
  WDATA -2895, -2913, -2930, -2948, -2965, -2983, -3000, -3017, -3034, -3051, -3067, -3084, -3100, -3117, -3133, -3149,
  WDATA -3165, -3181, -3197, -3212, -3228, -3243, -3258, -3274, -3289, -3304, -3318, -3333, -3348, -3362, -3376, -3390,
  WDATA -3404, -3418, -3432, -3446, -3459, -3473, -3486, -3499, -3512, -3525, -3537, -3550, -3563, -3575, -3587, -3599,
  WDATA -3611, -3623, -3634, -3646, -3657, -3669, -3680, -3691, -3701, -3712, -3723, -3733, -3743, -3753, -3763, -3773,
  WDATA -3783, -3792, -3802, -3811, -3820, -3829, -3838, -3847, -3855, -3864, -3872, -3880, -3888, -3896, -3903, -3911,
  WDATA -3918, -3925, -3932, -3939, -3946, -3953, -3959, -3966, -3972, -3978, -3984, -3989, -3995, -4000, -4006, -4011,
  WDATA -4016, -4021, -4025, -4030, -4034, -4038, -4043, -4046, -4050, -4054, -4057, -4061, -4064, -4067, -4070, -4072,
  WDATA -4075, -4077, -4079, -4081, -4083, -4085, -4087, -4088, -4090, -4091, -4092, -4093, -4093, -4094, -4094, -4094,
  WDATA -4094, -4094, -4094, -4094, -4093, -4093, -4092, -4091, -4090, -4088, -4087, -4085, -4083, -4081, -4079, -4077,
  WDATA -4075, -4072, -4070, -4067, -4064, -4061, -4057, -4054, -4050, -4046, -4042, -4038, -4034, -4030, -4025, -4021,
  WDATA -4016, -4011, -4006, -4000, -3995, -3989, -3984, -3978, -3972, -3966, -3959, -3953, -3946, -3939, -3932, -3925,
  WDATA -3918, -3911, -3903, -3896, -3888, -3880, -3872, -3863, -3855, -3847, -3838, -3829, -3820, -3811, -3802, -3792,
  WDATA -3783, -3773, -3763, -3753, -3743, -3733, -3723, -3712, -3701, -3691, -3680, -3668, -3657, -3646, -3634, -3623,
  WDATA -3611, -3599, -3587, -3575, -3562, -3550, -3537, -3525, -3512, -3499, -3486, -3473, -3459, -3446, -3432, -3418,
  WDATA -3404, -3390, -3376, -3362, -3347, -3333, -3318, -3304, -3289, -3274, -3258, -3243, -3228, -3212, -3197, -3181,
  WDATA -3165, -3149, -3133, -3117, -3100, -3084, -3067, -3050, -3034, -3017, -3000, -2983, -2965, -2948, -2930, -2913,
  WDATA -2895, -2877, -2859, -2841, -2823, -2805, -2787, -2768, -2749, -2731, -2712, -2693, -2674, -2655, -2636, -2617,
  WDATA -2597, -2578, -2558, -2539, -2519, -2499, -2479, -2459, -2439, -2419, -2398, -2378, -2357, -2337, -2316, -2295,
  WDATA -2275, -2254, -2233, -2211, -2190, -2169, -2148, -2126, -2105, -2083, -2061, -2040, -2018, -1996, -1974, -1952,
  WDATA -1930, -1908, -1885, -1863, -1841, -1818, -1796, -1773, -1750, -1728, -1705, -1682, -1659, -1636, -1613, -1590,
  WDATA -1567, -1543, -1520, -1497, -1473, -1450, -1426, -1403, -1379, -1355, -1332, -1308, -1284, -1260, -1236, -1212,
  WDATA -1188, -1164, -1140, -1116, -1092, -1067, -1043, -1019,  -994,  -970,  -946,  -921,  -897,  -872,  -848,  -823,
  WDATA -798,   -774,  -749,  -724,  -700,  -675,  -650,  -625,  -600,  -575,  -551,  -526,  -501,  -476,  -451,  -426,
  WDATA -401,   -376,  -351,  -326,  -301,  -276,  -251,  -225,  -200,  -175,  -150,  -125,  -100,   -75,   -50,   -25
'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
SUB butterflies
'    int32_t k1, k2, k3, a, b, c, d, flightSize, noFlights, b0, b1, wIndex, level, flight, butterfly, flightIndex, tx, ty;

  ' Apply FFT butterflies to N complex samples in buffers bx and by, in time decimated order!
  ' Resulting FFT is produced in bx and by in the correct order.
  flightSize = 1
  noFlights = FFT_SIZE >> 1

  ' Loop though the decimation levels
  level = 0
  DO WHILE level < LOG2_FFT_SIZE
    flightIndex = 0
    ' Loop through each flight on a level.
    flight = 0
    DO WHILE flight < noFlights
      wIndex = 0
      ' Loop through butterflies within a flight.
      butterfly = 0
      DO WHILE butterfly < flightSize
        b0 = flightIndex + butterfly
        b1 = b0 + flightSize

        ' At last...the butterfly.
        RDLONG bx(b1), a ' Get X[b1]
        RDLONG by(b1), b

        RDSWORD wx(wIndex), c ' Get W[wIndex]
        RDSWORD wy(wIndex), d

        k1 = c + d  ' Somewhat optimized complex multiply
        k1 = k1 * a '    T = X[b1] * W[wIndex]
'        k1 = k1 >> 12
\       sar  k1,#12

        k2 = a + b
        k2 = k2 * d
'        k2 = k2 >> 12
\       sar  k2,#12

        k3 = b - a
        k3 = k3 * c
'        k3 = k3 >> 12
\       sar  k3,#12

        tx = k1 - k2
        ty = k1 + k3

        RDLONG bx(b0), k1 ' X[b1] = X[b0] * T
        RDLONG by(b0), k2
        temp = k1 - tx ' X[b1] = X[b0] * T
        WRLONG bx(b1), temp
        temp = k2 - ty
        WRLONG by(b1), temp


        temp = k1 + tx  ' X[b0] = X[b0] * T
        WRLONG bx(b0), temp
        temp = k2 + ty
        WRLONG by(b0), temp

        INC wIndex, noFlights

        INC butterfly
      LOOP
      temp = flightSize << 1
      INC flightIndex, temp
      INC flight
    LOOP
    flightSize = flightSize << 1
    noFlights = noFlights >> 1
    INC level
  LOOP
ENDSUB


SUB PrintChar
  SEROUT 30, T115200, __param1
ENDSUB


SUB PrintStr
  __param2 = __param1
  DO
    RDBYTE __param2, __param1
    IF __param1 = 0 THEN EXIT
    PrintChar __param1
    INC __param2
  LOOP
ENDSUB

SUB PrintNumber
  ascii = STR __param1, 9, 3
  PrintStr ascii
ENDSUB

'----------------------------------------------------------------------------------------------------------------------
'
'----------------------------------------------------------------------------------------------------------------------
'    This file is distributed under the terms of the The MIT License as follows:
'
'    Copyright (c) 2011 Michael Rychlik
'
'    Permission is hereby granted, free of charge, to any person obtaining a copy
'    of this software and associated documentation files (the "Software"), to deal
'    in the Software without restriction, including without limitation the rights
'    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
'    copies of the Software, and to permit persons to whom the Software is
'    furnished to do so, subject to the following conditions:
'
'    The above copyright notice and this permission notice shall be included in
'    all copies or substantial portions of the Software.
'
'    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
'    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
'    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
'    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
'    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
'    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
'    THE SOFTWARE.
'----------------------------------------------------------------------------------------------------------------------

